using System;
using AutoExceptionHandler.Annotations;

namespace AutoExceptionHandler.Sample;

/// <summary>
/// This class used the ExceptionHandler attribute to mark it for generation.
/// </summary>
[ExceptionHandler]
public partial class ExampleHandler {
  /// <summary>
  /// General exception handler method. Generated by this library.
  /// </summary>
  /// <param name="ex">The passed exception. Must be the first argument</param>
  /// <param name="message">Additional parameters can be specified and will be passed to methods that accept it as an argument.</param>
  /// <returns>If it returns non-null it will only take methods that return</returns>
  [GeneralExceptionHandler]
  public partial int HandleException(Exception ex, string message);
                 
  /// <summary>
  /// Handles a single exception type matching the argument.
  /// </summary>
  /// <param name="ex">The exception type. Used in the type check.</param>
  /// <param name="message">Passed along by the generator</param>
  [HandlesException]
  private static int HandleSingle(ArgumentNullException ex, string message) {
    return 4;
  }
           
  /// <summary>
  /// Handles multiple exception types as specified in the header.
  /// </summary>
  /// <param name="ex">The exception type. Must be common between the types. Will be cast if necessary.</param>
  [HandlesException(typeof(NullReferenceException), typeof(ArithmeticException))]
  private static int HandleMultiple(Exception ex) {
    return 5;
  }
  
  /// <summary>
  /// Fallback handler if none of the other methods work.
  /// </summary>
  /// <param name="ex">The exception type. Should match the general handler.</param>
  [FallbackExceptionHandler]
  private static int HandleFallback(Exception ex) {
    return 6;
  }
}