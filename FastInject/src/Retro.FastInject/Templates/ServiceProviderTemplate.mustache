using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Retro.FastInject.Core;

namespace {{Namespace}};

#nullable enable

partial class {{ClassName}} : IServiceProvider, 
    {{#RegularServices}}
    IServiceProvider<{{ServiceType}}>,
    {{/RegularServices}}
    IKeyedServiceProvider,
    {{#KeyedServices}}
    IKeyedServiceProvider<{{ServiceType}}>,
    {{/KeyedServices}}
    IServiceScopeFactory, 
    IDisposable, 
    IAsyncDisposable {

  private Scope? _rootScope;
  {{#Singletons}}
  private {{Type}}? {{Name}};     
  {{/Singletons}}
  private readonly List<DisposableWrapper> _disposables = [];
  
  private Scope GetRootScope() {
      return LazyInitializer.EnsureInitialized(ref _rootScope, () => new Scope(this));
  }

  public object? GetService(Type serviceType) {
    if (serviceType == typeof(IServiceProvider) || serviceType == typeof(IServiceScopeFactory)) {
      return this;
    }

    {{#withIndent '    '}}
    {{> ServiceTypeResolution providerInstance='this'}}
    {{/withIndent}}    

    return null;
  }
  
  {{#withIndent '  '}}
  {{> RegularServiceGetters isScope=false providerInstance='this'}}
  {{/withIndent}}

  public object? GetKeyedService(Type serviceType, object? serviceKey) {
    if (serviceKey is string asString) {
      {{#KeyedServices}}
      if (serviceType == typeof({{ServiceType}})) return ((IKeyedServiceProvider<{{ServiceType}}>) this).GetKeyedService(asString);
      {{/KeyedServices}}
    }
    
    return null;
  }

  public object GetRequiredKeyedService(Type serviceType, object? serviceKey) {
    var service = GetKeyedService(serviceType, serviceKey);
    if (service == null) {
      throw new InvalidOperationException($"Service of type '{serviceType}' with key '{serviceKey}' cannot be resolved.");
    }

    return service;
  }

  {{#KeyedServices}}
  {{ServiceType}}? IKeyedServiceProvider<{{ServiceType}}>.GetKeyedService(string serviceKey) {
    {{#withIndent '    '}}
    {{> KeyedServiceSwitch providerInstance='this' isScope=false}}
    {{/withIndent}}
  }

  {{/KeyedServices}}  

  public IServiceScope CreateScope() {
    return new Scope(this);
  }

  public void Dispose() {
    _rootScope?.Dispose();
    
    {{#Singletons}}
    {{#IsDisposable}}
    {{Name}}?.Dispose();
    {{/IsDisposable}}
    {{/Singletons}}

    foreach (var disposable in _disposables) {
      disposable.Dispose();
    }
  }

  public async ValueTask DisposeAsync() {
    if (_rootScope is not null) await _rootScope.DisposeAsync();

    {{#Singletons}}
    {{#IsAsyncDisposable}}
    if ({{Name}} != null) await {{Name}}.DisposeAsync();
    {{/IsAsyncDisposable}}
    {{^IsAsyncDisposable}}
    {{#IsDisposable}}
    {{Name}}?.Dispose();
    {{/IsDisposable}}    
    {{/IsAsyncDisposable}}    
    {{/Singletons}}

    foreach (var disposable in _disposables) {
      await disposable.DisposeAsync();
    }
  }

  public partial class Scope : IServiceProvider, 
                       {{#RegularServices}}
                       IServiceProvider<{{ServiceType}}>,
                       {{/RegularServices}}
                       IKeyedServiceProvider,
                       IServiceScope,
                       {{#KeyedServices}}
                       IKeyedServiceProvider<{{ServiceType}}>,
                       {{/KeyedServices}}
                       IDisposable, 
                       IAsyncDisposable {
    
    private readonly SampleServiceProvider _root;
    {{#Scoped}}
    private {{Type}}? {{Name}};     
    {{/Scoped}}
    private readonly List<DisposableWrapper> _disposables = [];

    public IServiceProvider ServiceProvider => this;
    
    public Scope(SampleServiceProvider root) {
      _root = root;
    }

    public object? GetService(Type serviceType) {
      if (serviceType == typeof(IServiceProvider)) {
        return this;
      }  
      
      if (serviceType == typeof(IServiceScopeFactory)) {
        return _root;
      }

      {{#withIndent '      '}}
      {{> ServiceTypeResolution providerInstance='this'}}
      {{/withIndent}}
      
      return null;
    }
    
    {{#withIndent '    '}}
    {{> RegularServiceGetters isScope=true providerInstance='this'}}
    {{/withIndent}}

    public object? GetKeyedService(Type serviceType, object? serviceKey) {
      if (serviceKey is string asString) {
        {{#KeyedServices}}
        if (serviceType == typeof({{ServiceType}})) return ((IKeyedServiceProvider<{{ServiceType}}>) this).GetKeyedService(asString);
        {{/KeyedServices}}
      }
    
      return null;
    }

    public object GetRequiredKeyedService(Type serviceType, object? serviceKey) {
      var service = GetKeyedService(serviceType, serviceKey);
      if (service == null) {
        throw new InvalidOperationException($"Service of type '{serviceType}' with key '{serviceKey}' cannot be resolved.");
      }

      return service;
    }

    {{#KeyedServices}}
    {{ServiceType}}? IKeyedServiceProvider<{{ServiceType}}>.GetKeyedService(string serviceKey) {
      {{#withIndent '      '}}
      {{> KeyedServiceSwitch providerInstance='this' isScope=false}}
      {{/withIndent}}
    }

    {{/KeyedServices}}  

    public void Dispose() {
      {{#Scoped}}
      {{#IsDisposable}}
      {{Name}}?.Dispose();
      {{/IsDisposable}}
      {{/Scoped}}  
        
      foreach (var disposable in _disposables) {
        disposable.Dispose();     
      }
    }

    public async ValueTask DisposeAsync() {
      {{#Scoped}}
      {{#IsAsyncDisposable}}
      if ({{Name}} != null) await {{Name}}.DisposeAsync();
      {{/IsAsyncDisposable}}
      {{^IsAsyncDisposable}}
      {{#IsDisposable}}
      {{Name}}?.Dispose();
      {{/IsDisposable}}
      {{/IsAsyncDisposable}}
      {{/Scoped}} 

      foreach (var disposable in _disposables) {
        await disposable.DisposeAsync();     
      }
    }
  }
}