using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Retro.FastInject.Core;

namespace {{Namespace}};

partial class {{ClassName}} : IServiceProvider, 
    {{#RegularServices}}
    IServiceProvider<{{ServiceType}}>,
    {{/RegularServices}}
    IKeyedServiceProvider,
    {{#KeyedServices}}
    IKeyedServiceProvider<{{ServiceType}}>,
    {{/KeyedServices}}
    IServiceScopeFactory, 
    IDisposable, 
    IAsyncDisposable {

  private Scope? _rootScope;
  {{#Singletons}}
  private {{Type}}? {{Name}};     
  {{/Singletons}}
  {{#KeyedSingletons}}
  private {{Type}}? {{Name}};     
  {{/KeyedSingletons}}
  private readonly List<DisposableWrapper> _disposables = [];
  
  private Scope GetRootScope() {
      return LazyInitializer.EnsureInitialized(ref _rootScope, () => new Scope(this));
  }

  public object? GetService(Type serviceType) {
    if (serviceType == typeof(IServiceProvider) || serviceType == typeof(IServiceScopeFactory)) {
      return this;
    }

    {{#RegularServices}}
    if (serviceType == typeof({{ServiceType}})) return ((IServiceProvider<{{ServiceType}}>) this).GetService();
    {{/RegularServices}}
    
    return null;
  }

  {{#RegularServices}}
  {{ServiceType}} IServiceProvider<{{ServiceType}}>.GetService() {
    {{InitializerBody}}
  }  
  {{/RegularServices}}

  public object? GetKeyedService(Type serviceType, object? serviceKey) {
    {{#KeyedServices}}
    if (serviceType == typeof({{ServiceType}})) return ((IServiceProvider<{{ServiceType}}>) this).GetKeyedService(serviceKey);
    {{/KeyedServices}}
    
    return null;
  }

  public object GetRequiredKeyedService(Type serviceType, object? serviceKey) {
    var service = GetKeyedService(serviceType, serviceKey);
    if (service == null) {
      throw new InvalidOperationException($"Service of type '{serviceType}' with key '{serviceKey}' cannot be resolved.");
    }

    return service;
  }

  {{#KeyedServices}}
  {{ServiceType}} IServiceProvider<{{ServiceType}}>.GetService() {
    {{#IsImplementation}}
    {{InitializerBody}}  
    {{/IsImplementation}}
    
  }  
  {{/KeyedServices}}  

  public IServiceScope CreateScope() {
    return new Scope(this);
  }

  public void Dispose() {
    _rootScope?.Dispose();
    
    {{#Disposables}}
    {{VariableName}}?.Dispose();
    {{/Disposables}}

    foreach (var disposable in _disposables) {
      disposable.Dispose();
    }
  }

  public async ValueTask DisposeAsync() {
    await TryDispose(_rootScope);

    {{#AsyncDisposables}}
    if ({{VariableName}} is not null) await {{VariableName}}.DisposeAsync();
    {{/AsyncDisposables}}

    foreach (var disposable in _disposables) {
      await disposable.DisposeAsync();
    }
  }

  private ValueTask TryDispose(IAsyncDisposable? disposable) {
    return disposable?.DisposeAsync() ?? default;

  }
    
  IKeyedSingleton? IKeyedServiceProvider<IKeyedSingleton>.GetKeyedService(string serviceKey) {
    return ((IKeyedServiceProvider<KeyedSingleton>) this).GetKeyedService(serviceKey);
  }

  KeyedSingleton? IKeyedServiceProvider<KeyedSingleton>.GetKeyedService(string serviceKey) {
    return serviceKey switch {
        "dummy_key" => LazyInitializer.EnsureInitialized(ref _keyedSingleton, () => new KeyedSingleton()),
        _ => null
    };
  }

  public partial class Scope : IServiceProvider, 
                       IKeyedServiceProvider,
                       IServiceScope,
                       IServiceProvider<ISingletonService>,
                       IServiceProvider<SingletonService>,
                       IServiceProvider<IScopedService>,
                       IServiceProvider<ScopedService>,
                       IServiceProvider<ITransientService>,
                       IServiceProvider<TransientService>, 
                       IDisposable, 
                       IAsyncDisposable {
    
    private readonly SampleServiceProvider _root;
    private ScopedService? _scopedService;
    private readonly List<DisposableWrapper> _disposables = [];

    public IServiceProvider ServiceProvider => this;
    
    public Scope(SampleServiceProvider root) {
      _root = root;
    }

    public object? GetService(Type serviceType) {
      throw new NotImplementedException();
    }

    public object? GetKeyedService(Type serviceType, object? serviceKey) {
      throw new NotImplementedException();
    }

    public object GetRequiredKeyedService(Type serviceType, object? serviceKey) {
      throw new NotImplementedException();
    }

    ISingletonService IServiceProvider<ISingletonService>.GetService() {
      return ((IServiceProvider<ISingletonService>) _root).GetService();
    }

    SingletonService IServiceProvider<SingletonService>.GetService() {
      return ((IServiceProvider<SingletonService>) _root).GetService();
    }

    IScopedService IServiceProvider<IScopedService>.GetService() {
      return ((IServiceProvider<ScopedService>) this).GetService();
    }

    ScopedService IServiceProvider<ScopedService>.GetService() {
      var singletonService = ((IServiceProvider<ISingletonService>) this).GetService();
      var transientService = ((IServiceProvider<ITransientService>) this).GetService();
      return LazyInitializer.EnsureInitialized(ref _scopedService, () => new ScopedService(singletonService, transientService));
    }

    ITransientService IServiceProvider<ITransientService>.GetService() {
      return ((IServiceProvider<ITransientService>) _root).GetService();
    }

    TransientService IServiceProvider<TransientService>.GetService() {
      return ((IServiceProvider<TransientService>) _root).GetService();
    }

    public void Dispose() {
      foreach (var disposable in _disposables) {
        disposable.Dispose();     
      }
    }

    public async ValueTask DisposeAsync() {
      foreach (var disposable in _disposables) {
        await disposable.DisposeAsync();     
      }
    }
  }
}