using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Retro.FastInject.Core;

namespace {{Namespace}};

#nullable enable

partial class {{ClassName}} : IServiceProvider, 
    {{#RegularServices}}
    IServiceProvider<{{ServiceType}}>,
    {{/RegularServices}}
    IKeyedServiceProvider,
    {{#KeyedServices}}
    IKeyedServiceProvider<{{ServiceType}}>,
    {{/KeyedServices}}
    IServiceScopeFactory, 
    IDisposable, 
    IAsyncDisposable {

  private Scope? _rootScope;
  {{#Singletons}}
  private {{Type}}? {{Name}};     
  {{/Singletons}}
  private readonly List<DisposableWrapper> _disposables = [];
  
  private Scope GetRootScope() {
      return LazyInitializer.EnsureInitialized(ref _rootScope, () => new Scope(this));
  }

  public object? GetService(Type serviceType) {
    if (serviceType == typeof(IServiceProvider) || serviceType == typeof(IServiceScopeFactory)) {
      return this;
    }

    {{#RegularServices}}
    if (serviceType == typeof({{ServiceType}})) return ((IServiceProvider<{{ServiceType}}>) this).GetService();
    {{/RegularServices}}
    
    return null;
  }

  {{#RegularServices}}
  {{ServiceType}} IServiceProvider<{{ServiceType}}>.GetService() {
    {{#FromOtherService}}
    return ((IServiceProvider<{{OtherType}}>) this).GetService();  
    {{/FromOtherService}}
    {{#IsSingleton}}
    return LazyInitializer.EnsureInitialized(ref {{FieldName}}, () => new {{ServiceType}}());
    {{/IsSingleton}}
    {{#IsScoped}}
    return ((IServiceProvider<{{ServiceType}}>) GetRootScope()).GetService();    
    {{/IsScoped}}
    {{#IsTransient}}
    return new {{ServiceType}}();    
    {{/IsTransient}}
  }  
  {{/RegularServices}}

  public object? GetKeyedService(Type serviceType, object? serviceKey) {
    if (serviceKey is string asString) {
      {{#KeyedServices}}
      if (serviceType == typeof({{ServiceType}})) return ((IKeyedServiceProvider<{{ServiceType}}>) this).GetKeyedService(asString);
      {{/KeyedServices}}
    }
    
    return null;
  }

  public object GetRequiredKeyedService(Type serviceType, object? serviceKey) {
    var service = GetKeyedService(serviceType, serviceKey);
    if (service == null) {
      throw new InvalidOperationException($"Service of type '{serviceType}' with key '{serviceKey}' cannot be resolved.");
    }

    return service;
  }

  {{#KeyedServices}}
  {{ServiceType}}? IKeyedServiceProvider<{{ServiceType}}>.GetKeyedService(string serviceKey) {
    {{#FromOtherService}}
    return ((IKeyedServiceProvider<{{OtherType}}>) this).GetKeyedService(serviceKey);  
    {{/FromOtherService}}
    {{^FromOtherService}}    
    switch (serviceKey) {
      {{#Options}}
      case "{{Key}}": {
        {{#FromOtherService}}
        return ((IKeyedServiceProvider<{{OtherType}}>) this).GetKeyedService(serviceKey);    
        {{/FromOtherService}}
        {{#IsSingleton}}
        return LazyInitializer.EnsureInitialized(ref {{FieldName}}, () => new {{ServiceType}}({{Parameters}}));
        {{/IsSingleton}}
        {{#IsScoped}}
        return ((IKeyedServiceProvider<{{ServiceType}}>) GetRootScope()).GetKeyedService(serviceKey);    
        {{/IsScoped}}
        {{#IsTransient}}
        return new {{ServiceType}}({{Parameters}});    
        {{/IsTransient}}
      }
      {{/Options}}
      default:
        return null;
    };    
    {{/FromOtherService}}
  }
  {{/KeyedServices}}  

  public IServiceScope CreateScope() {
    return new Scope(this);
  }

  public void Dispose() {
    _rootScope?.Dispose();
    
    {{#Disposables}}
    {{VariableName}}?.Dispose();
    {{/Disposables}}

    foreach (var disposable in _disposables) {
      disposable.Dispose();
    }
  }

  public async ValueTask DisposeAsync() {
    await TryDispose(_rootScope);

    {{#AsyncDisposables}}
    if ({{VariableName}} is not null) await {{VariableName}}.DisposeAsync();
    {{/AsyncDisposables}}

    foreach (var disposable in _disposables) {
      await disposable.DisposeAsync();
    }
  }

  private ValueTask TryDispose(IAsyncDisposable? disposable) {
    return disposable?.DisposeAsync() ?? default;

  }

  public partial class Scope : IServiceProvider, 
                       {{#RegularServices}}
                       IServiceProvider<{{ServiceType}}>,
                       {{/RegularServices}}
                       IKeyedServiceProvider,
                       IServiceScope,
                       {{#KeyedServices}}
                       IKeyedServiceProvider<{{ServiceType}}>,
                       {{/KeyedServices}}
                       IDisposable, 
                       IAsyncDisposable {
    
    private readonly SampleServiceProvider _root;
    {{#Scoped}}
    private {{Type}}? {{Name}};     
    {{/Scoped}}
    private readonly List<DisposableWrapper> _disposables = [];

    public IServiceProvider ServiceProvider => this;
    
    public Scope(SampleServiceProvider root) {
      _root = root;
    }

    public object? GetService(Type serviceType) {
      if (serviceType == typeof(IServiceProvider)) {
        return this;
      }  
      
      if (serviceType == typeof(IServiceScopeFactory)) {
        return _root;
      }
      {{#RegularServices}}
      if (serviceType == typeof({{ServiceType}})) return ((IServiceProvider<{{ServiceType}}>) this).GetService();
      {{/RegularServices}}  
      
      return null;
    }

    {{#RegularServices}}
    {{ServiceType}} IServiceProvider<{{ServiceType}}>.GetService() {
      {{#FromOtherService}}
      return ((IServiceProvider<{{OtherType}}>) this).GetService();  
      {{/FromOtherService}}
      {{#IsSingleton}}
      return ((IServiceProvider<{{ServiceType}}>) _root).GetService();  
      {{/IsSingleton}}
      {{#IsScoped}}
      return LazyInitializer.EnsureInitialized(ref {{FieldName}}, () => new {{ServiceType}}({{Parameters}}));
      {{/IsScoped}}
      {{#IsTransient}}
      return new {{ServiceType}}({{Parameters}});    
      {{/IsTransient}}
    }  
    {{/RegularServices}}

    public object? GetKeyedService(Type serviceType, object? serviceKey) {
      if (serviceKey is string asString) {
        {{#KeyedServices}}
        if (serviceType == typeof({{ServiceType}})) return ((IKeyedServiceProvider<{{ServiceType}}>) this).GetKeyedService(asString);
        {{/KeyedServices}}
      }
    
      return null;
    }

    public object GetRequiredKeyedService(Type serviceType, object? serviceKey) {
      var service = GetKeyedService(serviceType, serviceKey);
      if (service == null) {
        throw new InvalidOperationException($"Service of type '{serviceType}' with key '{serviceKey}' cannot be resolved.");
      }

      return service;
    }

    {{#KeyedServices}}
    {{ServiceType}}? IKeyedServiceProvider<{{ServiceType}}>.GetKeyedService(string serviceKey) {
      {{#FromOtherService}}
      return ((IKeyedServiceProvider<{{OtherType}}>) this).GetKeyedService(serviceKey);      
      {{/FromOtherService}}
      {{^FromOtherService}}
      switch (serviceKey) {
        {{#Options}}
        case "{{Key}}": {
          {{#FromOtherService}}
          return ((IKeyedServiceProvider<{{OtherType}}>) this).GetKeyedService(serviceKey);    
          {{/FromOtherService}}
          {{#IsSingleton}}
          return ((IKeyedServiceProvider<{{ServiceType}}>) _root).GetKeyedService(serviceKey); 
          {{/IsSingleton}}
          {{#IsScoped}}
          return LazyInitializer.EnsureInitialized(ref {{FieldName}}, () => new {{ServiceType}}({{Parameters}}));
          {{/IsScoped}}
          {{#IsTransient}}
          return new {{ServiceType}}({{Parameters}});    
          {{/IsTransient}}
        }
        {{/Options}}
        default:
          return null;
      };
      {{/FromOtherService}}
    }
    {{/KeyedServices}}  

    public void Dispose() {
      foreach (var disposable in _disposables) {
        disposable.Dispose();     
      }
    }

    public async ValueTask DisposeAsync() {
      foreach (var disposable in _disposables) {
        await disposable.DisposeAsync();     
      }
    }
  }
}