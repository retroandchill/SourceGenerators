using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Microsoft.CodeAnalysis;
using Retro.SourceGeneratorUtilities.Core.Attributes;
using Retro.SourceGeneratorUtilities.Core.Types;
#nullable enable

namespace {{Namespace}};

public static class {{Name}}Extensions {

  public static {{Name}} Get{{Name}}(this AttributeData data) {
    return data.TryGet{{Name}}(out var info) ? info : throw new InvalidOperationException("Cannot create {{AttributeName}}Info");
  }  

  public static bool TryGet{{Name}}(this AttributeData data, [NotNullWhen(true)] out {{Name}}? info) {
    var args = data.ConstructorArguments;

    if (data.AttributeClass is null) {
      info = null;
      return false;
    }

    {{#ChildClasses}}
    if (!data.AttributeClass.IsOfType(typeof({{AttributeType}}))) {
      if ({{ModelType}}Extensions.TryGet{{ModelName}}(data, out var childInfo)) {
        info = childInfo;
        return true;
      } else {
        info = null;
        return false;
      }
    }
    {{/ChildClasses}}

    if (!data.AttributeClass.IsSameType(typeof({{AttributeSymbol}}))) {
      info = null;
      return false;
    }

    {{#Constructors}}
    if (data.HasMatchingConstructor({{#Parameters}}typeof({{NonNullableType}}){{^IsLast}}, {{/IsLast}}{{/Parameters}})) {
      var namedArguments = data.NamedArguments.ToDictionary();
      info = new {{../Name}}({{#Parameters}}data.ConstructorArguments[{{Index}}].GetTypedValue<{{Type}}>(){{^IsLast}}, {{/IsLast}}{{/Parameters}}) {
        {{#each ../Properties}}
          {{Name}} = namedArguments.TryGetValue("{{Name}}", out var value{{Name}}) ? value{{Name}}.GetTypedValue<{{Type}}>() : {{#HasDefaultValue}}{{DefaultValue}}{{/HasDefaultValue}}{{^HasDefaultValue}}default{{/HasDefaultValue}},
        {{/each}}
      };
      return true;
    }
    
    {{/Constructors}}

    info = null;
    return false;
  }

  public static IEnumerable<{{Name}}> Get{{Name}}s(this IEnumerable<AttributeData> attributeDatas) {
    foreach (var data in attributeDatas) {
      if (data.TryGet{{Name}}(out var info)) {
        yield return info;
      }
    }
  }

}