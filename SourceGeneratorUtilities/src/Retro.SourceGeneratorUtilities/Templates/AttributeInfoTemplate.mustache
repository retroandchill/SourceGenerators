using System;
using System.Linq;
using Retro.SourceGeneratorUtilities.Core.Attributes;
using Retro.SourceGeneratorUtilities.Core.Types;
#nullable enable

namespace {{Namespace}};

public class {{AttributeName}}Info{{#HasPrimaryConstructor}}({{#PrimaryConstructor.Parameters}}{{Type}} {{Name}}{{#HasDefaultValue}} = {{DefaultValue}}{{/HasDefaultValue}}{{^IsLast}}, {{/IsLast}}{{/PrimaryConstructor.Parameters}}){{/HasPrimaryConstructor}}{{#HasParentClass}} : {{ParentAttribute}}Info{{#HasPrimaryConstructor}}({{#PrimaryConstructor.HasInitializer}}{{#PrimaryConstructor.Initializer.Arguments}}{{Expression}}{{^IsLast}}, {{/IsLast}}{{/PrimaryConstructor.Initializer.Arguments}}{{/PrimaryConstructor.HasInitializer}}){{/HasPrimaryConstructor}}{{/HasParentClass}} {

  {{#Properties}}
  {{Accessibility}} {{Type}} {{Name}} { get;{{#HasSetter}} init;{{/HasSetter}} }{{#HasInitializer}} = {{Initializer}};{{/HasInitializer}}
  {{/Properties}}

  {{#Constructors}}
  public {{../AttributeName}}Info({{#Parameters}}{{Type}} {{Name}}{{#HasDefaultValue}} = {{DefaultValue}}{{/HasDefaultValue}}{{^IsLast}}, {{/IsLast}}{{/Parameters}}){{#HasInitializer}} : {{Initializer.Type}}({{#Initializer.Arguments}}{{Expression}}{{^IsLast}}, {{/IsLast}}{{/Initializer.Arguments}}){{/HasInitializer}} {
    {{#Assignments}}
    {{Left}} = {{Right}};
    {{/Assignments}}
  }
  
  {{/Constructors}}

}

public static class {{AttributeName}}InfoExtensions {

  public static {{AttributeName}}Info New(this AttributeInfo<{{AttributeName}}> info) {
    var args = info.Data.ConstructorArguments;

    {{#AllConstructors}}
    if (info.Data.HasMatchingConstructor({{#Parameters}}typeof({{NonNullableType}}){{^IsLast}}, {{/IsLast}}{{/Parameters}})) {
      {{#Parameters}}
      var arg{{Index}} = info.Data.ConstructorArguments[{{Index}}].GetTypedValue<{{Type}}>();
      {{/Parameters}}
    
      var namedArguments = info.Data.NamedArguments.ToDictionary();
    
      return new {{../AttributeName}}Info({{#Parameters}}arg{{Index}}{{^IsLast}}, {{/IsLast}}{{/Parameters}}) {
        {{#each ../Properties}}
        {{#HasSetter}}
          {{Name}} = namedArguments.TryGetValue("{{Name}}", out var value{{Name}}) ? value{{Name}}.GetTypedValue<{{Type}}>() : {{#if HasInitializer}}{{Initializer}}{{else}}default{{/if}},
        {{/HasSetter}}
        {{/each}}
      };
    }
    
    {{/AllConstructors}}
    throw new InvalidOperationException("Cannot create {{AttributeName}}Info"); 
  }

}