using System;
using System.CommandLine;
using Retro.AutoCommandLine.Core.Handlers;

namespace {{Namespace}};

public static class {{ClassName}}Factory {

  public static Command Create(ICommandHandlerFactory handlerFactory) {
    {{#IsRootCommand}}
    var command = new RootCommand({{#HasDescription}}{{Description}}{{/HasDescription}});  
    {{/IsRootCommand}}
    {{^IsRootCommand}}
    var command = new Command("{{CommandName}}"{{#HasDescription}}, {{Description}}{{/HasDescription}});
    {{/IsRootCommand}}

    {{#Options}}
    var {{Name}}{{Wrapper}} = new {{Wrapper}}<{{Type}}>({{#IsOption}}[{{#Aliases}}"{{Name}}"{{^IsLast}}, {{/IsLast}}{{/Aliases}}]{{/IsOption}}{{^IsOption}}"{{DisplayName}}"{{/IsOption}}) {
      {{#HasDescription}}
      Description = {{Description}},
      {{/HasDescription}}
      {{#IsRequired}}
      IsRequired = true,
      {{/IsRequired}}
    };
    {{/Options}}

    {{#Options}}
    command.Add{{Wrapper}}({{Name}}{{Wrapper}});
    {{/Options}}

    {{#HasHandler}}
    command.Handler = new CommandHandlerAdapter<{{ClassName}}>(handlerFactory, new {{ClassName}}Binder({{#Options}}{{Name}}{{Wrapper}}{{^IsLast}}, {{/IsLast}}{{/Options}}));
    {{/HasHandler}}

    return command;
  }

}